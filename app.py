import os
import streamlit as st
import requests
import random
import time
from typing import Dict, List, Optional

# --- Page & Session State Setup ---
st.set_page_config(page_title="Indian History Explorer", page_icon="ЁЯПЫя╕П", layout="wide", initial_sidebar_state="expanded")

if "needs_reload" not in st.session_state:
    st.session_state.needs_reload = False

# --- Multilingual UI Text ---
LANGUAGES = {
    "English": {
        "title": "ЁЯПЫя╕П Indian History Explorer",
        "subtitle": "Discover the Rich Heritage of India",
        "search_placeholder": "Search for Indian historical events, personalities, or periods...",
        "search_button": "Explore History",
        "quiz_title": "ЁЯза Test Your Knowledge",
        "quiz_button": "Take Quiz",
        "quiz_topic_placeholder": "Enter topic for quiz (e.g., Mughal Empire, Freedom Struggle)",
        "no_results": "No results found. Please try a different search term.",
        "loading": "Loading historical information...",
        "quiz_loading": "Generating quiz questions...",
        "submit_quiz": "Submit Quiz",
        "score_text": "Your Score:",
        "correct_answer": "Correct Answer:",
        "explanation": "Explanation:",
        "congratulations": "Congratulations!",
        "well_done": "Well Done!",
        "good_effort": "Good Effort!",
        "keep_learning": "Keep Learning!",
        "language_selector": "Select Language",
        "wiki_link": "Read More on Wikipedia",
        "image_gallery": "Related Images",
        "historical_context": "Historical Context"
    },
    "рд╣рд┐рдВрджреА": {
        "title": "ЁЯПЫя╕П рднрд╛рд░рддреАрдп рдЗрддрд┐рд╣рд╛рд╕ рдЦреЛрдЬрдХрд░реНрддрд╛",
        "subtitle": "рднрд╛рд░рдд рдХреА рд╕рдореГрджреНрдз рд╡рд┐рд░рд╛рд╕рдд рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ",
        "search_placeholder": "рднрд╛рд░рддреАрдп рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдШрдЯрдирд╛рдУрдВ, рд╡реНрдпрдХреНрддрд┐рддреНрд╡реЛрдВ рдпрд╛ рдХрд╛рд▓реЛрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ...",
        "search_button": "рдЗрддрд┐рд╣рд╛рд╕ рдЦреЛрдЬреЗрдВ",
        "quiz_title": "ЁЯза рдЕрдкрдиреЗ рдЬреНрдЮрд╛рди рдХрд╛ рдкрд░реАрдХреНрд╖рдг рдХрд░реЗрдВ",
        "quiz_button": "рдкреНрд░рд╢реНрдиреЛрддреНрддрд░реА рд▓реЗрдВ",
        "quiz_topic_placeholder": "рдкреНрд░рд╢реНрдиреЛрддреНрддрд░реА рдХреЗ рд▓рд┐рдП рд╡рд┐рд╖рдп рджрд░реНрдЬ рдХрд░реЗрдВ (рдЬреИрд╕реЗ рдореБрдЧрд▓ рд╕рд╛рдореНрд░рд╛рдЬреНрдп, рд╕реНрд╡рддрдВрддреНрд░рддрд╛ рд╕рдВрдЧреНрд░рд╛рдо)",
        "no_results": "рдХреЛрдИ рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдПрдХ рдЕрд▓рдЧ рдЦреЛрдЬ рд╢рдмреНрдж рдЖрдЬрд╝рдорд╛рдПрдВред",
        "loading": "рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рд▓реЛрдб рд╣реЛ рд░рд╣реА рд╣реИ...",
        "quiz_loading": "рдкреНрд░рд╢реНрдиреЛрддреНрддрд░реА рдкреНрд░рд╢реНрди рддреИрдпрд╛рд░ рдХрд┐рдП рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ...",
        "submit_quiz": "рдкреНрд░рд╢реНрдиреЛрддреНрддрд░реА рдЬрдорд╛ рдХрд░реЗрдВ",
        "score_text": "рдЖрдкрдХрд╛ рд╕реНрдХреЛрд░:",
        "correct_answer": "рд╕рд╣реА рдЙрддреНрддрд░:",
        "explanation": "рд╕реНрдкрд╖реНрдЯреАрдХрд░рдг:",
        "congratulations": "рдмрдзрд╛рдИ рд╣реЛ!",
        "well_done": "рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛!",
        "good_effort": "рдЕрдЪреНрдЫрд╛ рдкреНрд░рдпрд╛рд╕!",
        "keep_learning": "рд╕реАрдЦрддреЗ рд░рд╣реЗрдВ!",
        "language_selector": "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "wiki_link": "рд╡рд┐рдХрд┐рдкреАрдбрд┐рдпрд╛ рдкрд░ рдФрд░ рдкрдврд╝реЗрдВ",
        "image_gallery": "рд╕рдВрдмрдВрдзрд┐рдд рдЪрд┐рддреНрд░",
        "historical_context": "рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рд╕рдВрджрд░реНрдн"
    },
    "р░др▒Жр░▓р▒Бр░Чр▒Б": {
        "title": "ЁЯПЫя╕П р░нр░╛р░░р░д р░Ър░░р░┐р░др▒Нр░░ р░Ер░ир▒Нр░╡р▒Зр░╖р░г",
        "subtitle": "р░нр░╛р░░р░др░жр▒Зр░╢ р░Ер░др░┐р░кр▒Жр░жр▒Нр░ж р░Ър░░р░┐р░др▒Нр░░р░ир▒Б р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐",
        "search_placeholder": "р░нр░╛р░░р░д р░Ър░░р░┐р░др▒Нр░░ р░╕р░Вр░Шр░Яр░ир░▓р▒Б, р░╡р▒Нр░пр░Хр▒Нр░др▒Бр░▓р▒Б р░▓р▒Зр░жр░╛ р░Хр░╛р░▓р░╛р░▓р░ир▒Б р░╢р▒Лр░зр░┐р░Вр░Ър░Вр░бр░┐...",
        "search_button": "р░Ър░░р░┐р░др▒Нр░░ р░Хр▒Кр░░р░Хр▒Б р░╡р▒Жр░др░кр░Вр░бр░┐",
        "quiz_title": "ЁЯза р░ор▒А р░Ьр▒Нр░Юр░╛р░ир░╛р░ир▒Нр░ир░┐ р░кр░░р▒Ар░Хр▒Нр░╖р░┐р░Вр░Ър░Вр░бр░┐",
        "quiz_button": "р░Хр▒Нр░╡р░┐р░Ьр▒Н р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐",
        "quiz_topic_placeholder": "р░Хр▒Нр░╡р░┐р░Ьр▒Н р░Хр▒Лр░╕р░В р░Ер░Вр░╢р░╛р░ир▒Нр░ир░┐ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐...",
        "no_results": "р░лр░▓р░┐р░др░╛р░▓р▒Б р░▓р▒Зр░╡р▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
        "loading": "р░Ър░░р░┐р░др▒Нр░░р░╛ р░╕р░ор░╛р░Ър░╛р░░р░В р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...",
        "quiz_loading": "р░Хр▒Нр░╡р░┐р░Ьр▒Н р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░др░пр░╛р░░р░╡р▒Бр░др▒Бр░ир▒Нр░ир░╛р░пр░┐...",
        "submit_quiz": "р░Хр▒Нр░╡р░┐р░Ьр▒Н р░╕р░ор░░р▒Нр░кр░┐р░Вр░Ър░Вр░бр░┐",
        "score_text": "р░ор▒А р░╕р▒Нр░Хр▒Лр░░р▒Б:",
        "correct_answer": "р░╕р░░р▒Ир░и р░╕р░ор░╛р░зр░╛р░ир░В:",
        "explanation": "р░╡р░┐р░╡р░░р░г:",
        "congratulations": "р░Ер░жр░┐р░░р░┐р░кр▒Лр░пр░┐р░Вр░жр░┐!",
        "well_done": "р░ор░Вр░Ър░┐р░жр░┐!",
        "good_effort": "р░╕р░╛р░зр░╛р░░р░гр░Вр░Чр░╛ р░мр░╛р░Чр░╛!",
        "keep_learning": "р░Зр░Вр░Хр░╛ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐!",
        "language_selector": "р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "wiki_link": "р░╡р░┐р░Хр▒Ар░кр▒Ар░бр░┐р░пр░╛р░▓р▒Л р░Ър░жр░╡р░Вр░бр░┐",
        "image_gallery": "р░╕р░Вр░мр░Вр░зр░┐р░д р░Ър░┐р░др▒Нр░░р░╛р░▓р▒Б",
        "historical_context": "р░Ър░╛р░░р░┐р░др▒Нр░░р░Х р░ир▒Зр░кр░ер▒Нр░пр░В"
    },
    "родрооро┐ро┤рпН": {
        "title": "ЁЯПЫя╕П роЗроирпНродро┐роп ро╡ро░ро▓ро╛ро▒рпБ роЖро░ро╛ропрпНроЪрпНроЪро┐",
        "subtitle": "роЗроирпНродро┐ропро╛ро╡ро┐ройрпН рокро╛роЯроЪро╛ро▓рпИропрпИ роХрогрпНроЯро▒ро┐ропрпБроЩрпНроХро│рпН",
        "search_placeholder": "роЗроирпНродро┐роп ро╡ро░ро▓ро╛ро▒рпН роЪроорпНрокро╡роЩрпНроХро│рпН, роирокро░рпНроХро│рпН роЕро▓рпНро▓родрпБ роХро╛ро▓роЩрпНроХро│рпИ родрпЗроЯро╡рпБроорпН...",
        "search_button": "ро╡ро░ро▓ро╛ро▒рпБ родрпЗроЯрпБ",
        "quiz_title": "ЁЯза роЙроЩрпНроХро│рпН роЕро▒ро┐ро╡рпИ роорпБропро▒рпНроЪро┐ роЪрпЖропрпНропрпБроЩрпНроХро│рпН",
        "quiz_button": "ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ родрпКроЯроЩрпНроХрпБ",
        "quiz_topic_placeholder": "ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ро╡ро┐ро▒рпНроХрпБ роТро░рпБ родро▓рпИрокрпНрокрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН...",
        "no_results": "рокропройрпНрокроЯрпБродрпНрод роорпБроЯро┐роирпНрод роТройрпНро▒рпБроорпН роЗро▓рпНро▓рпИ.",
        "loading": "ро╡ро░ро▓ро╛ро▒рпБ родроХро╡ро▓рпН роПро▒рпНро▒рпБ роХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒родрпБ...",
        "quiz_loading": "ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛роХрпНроХро│рпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...",
        "submit_quiz": "ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН",
        "score_text": "роЙроЩрпНроХро│рпН роородро┐рокрпНрокрпЖрогрпН:",
        "correct_answer": "роЪро░ро┐ропро╛рой рокродро┐ро▓рпН:",
        "explanation": "ро╡ро┐ро│роХрпНроХроорпН:",
        "congratulations": "ро╡ро╛ро┤рпНродрпНродрпБроХро│рпН!",
        "well_done": "рооро┐роХрокрпН рокрпЛроХро╛!",
        "good_effort": "роиро▓рпН роорпБропро▒рпНроЪро┐!",
        "keep_learning": "роорпАрогрпНроЯрпБроорпН роХро▒рпНро▒рпБроХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН!",
        "language_selector": "роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНро╡рпБ роЪрпЖропрпНроХ",
        "wiki_link": "ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ро╡ро┐ро▓рпН ро╡ро╛роЪро┐роХрпНроХро╡рпБроорпН",
        "image_gallery": "рокроЯрокрпН родрпКроХрпБрокрпНрокрпБ",
        "historical_context": "ро╡ро░ро▓ро╛ро▒рпНро▒рпБ роЪрпВро┤ро▓рпН"
    },
    "р┤ор┤▓р┤пр┤╛р┤│р┤В": {
        "title": "ЁЯПЫя╕П р┤Зр┤ир╡Нр┤др╡Нр┤пр╡╗ р┤Ър┤░р┤┐р┤др╡Нр┤░р┤В р┤Ер┤ир╡Нр┤╡р╡Зр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "subtitle": "р┤нр┤╛р┤░р┤др┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤╕р┤ор╡Нр┤кр┤ир╡Нр┤ир┤ор┤╛р┤п р┤Ър┤╛р┤░р┤┐р┤др╡Нр┤░р╡Нр┤пр┤В р┤Ер┤ир╡Нр┤╡р╡Зр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "search_placeholder": "р┤нр┤╛р┤░р┤др╡Ар┤п р┤Ър┤░р┤┐р┤др╡Нр┤░ р┤╕р┤Вр┤нр┤╡р┤Щр╡Нр┤Щр╡╛, р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Хр╡╛ р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤╕р┤ор┤пр┤Щр╡Нр┤Щр╡╛ р┤Ер┤ир╡Нр┤╡р╡Зр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...",
        "search_button": "р┤Ър┤░р┤┐р┤др╡Нр┤░р┤В р┤Ер┤ир╡Нр┤╡р╡Зр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "quiz_title": "ЁЯза р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤▒р┤┐р┤╡р╡Н р┤кр┤░р┤┐р┤╢р╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "quiz_button": "р┤Хр╡Нр┤╡р┤┐р┤╕р╡Н р┤Жр┤░р┤Вр┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "quiz_topic_placeholder": "р┤Хр╡Нр┤╡р┤┐р┤╕р┤┐р┤ир╡Н р┤╡р┤┐р┤╖р┤пр┤В р┤ир╡╜р┤Хр╡Бр┤Х...",
        "no_results": "р┤лр┤▓р┤Щр╡Нр┤Щр╡╛ р┤▓р┤нр╡Нр┤пр┤ор┤▓р╡Нр┤▓.",
        "loading": "р┤Ър┤░р┤┐р┤др╡Нр┤░ р┤╡р┤┐р┤╡р┤░р┤В р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
        "quiz_loading": "р┤Хр╡Нр┤╡р┤┐р┤╕р╡Н р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤др┤пр╡Нр┤пр┤╛р┤▒р┤╛р┤гр╡Н...",
        "submit_quiz": "р┤Хр╡Нр┤╡р┤┐р┤╕р╡Н р┤╕р┤ор╡╝р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "score_text": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╕р╡Нр┤Хр╡Лр╡╝:",
        "correct_answer": "р┤╢р┤░р┤┐ р┤Йр┤др╡Нр┤др┤░р┤В:",
        "explanation": "р┤╡р┤┐р┤╡р┤░р┤гр┤В:",
        "congratulations": "р┤Ер┤нр┤┐р┤ир┤ир╡Нр┤жр┤ир┤Щр╡Нр┤Щр╡╛!",
        "well_done": "р┤ир┤▓р╡Нр┤▓р┤др╡Н!",
        "good_effort": "р┤╢р╡Нр┤░р┤ор┤В!",
        "keep_learning": "р┤Хр╡Вр┤Яр╡Бр┤др╡╜ р┤кр┤ар┤┐р┤Хр╡Нр┤Хр╡Бр┤Х!",
        "language_selector": "р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        "wiki_link": "р┤╡р┤┐р┤Хр╡Нр┤Хр┤┐р┤кр╡Нр┤кр╡Ар┤бр┤┐р┤пр┤пр┤┐р╡╜ р┤╡р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "image_gallery": "р┤Ър┤┐р┤др╡Нр┤░р┤Щр╡Нр┤Щр╡╛",
        "historical_context": "р┤Ър┤░р┤┐р┤др╡Нр┤░р┤кр┤░р┤ор┤╛р┤п р┤кр┤╢р╡Нр┤Ър┤╛р┤др╡Нр┤др┤▓р┤В"
    }
}

# --- Wikipedia language domains ---
WIKI_DOMAINS = {
    "English": "en",
    "рд╣рд┐рдВрджреА": "hi",
    "р░др▒Жр░▓р▒Бр░Чр▒Б": "te",
    "родрооро┐ро┤рпН": "ta",
    "р┤ор┤▓р┤пр┤╛р┤│р┤В": "ml"
}

# --- Wikipedia Explorer Class ---
class IndianHistoryExplorer:
    def __init__(self, lang_code: str):
        self.search_url = f"https://{lang_code}.wikipedia.org/w/api.php"
        self.summary_url = f"https://{lang_code}.wikipedia.org/api/rest_v1/page/summary/"
        self.commons_url = "https://commons.wikimedia.org/w/api.php"

    def search_wikipedia(self, query: str) -> List[Dict]:
        params = {"action": "query", "format": "json", "list": "search", "srsearch": query, "srlimit": 5}
        try:
            r = requests.get(self.search_url, params=params, timeout=10)
            r.raise_for_status()
            return r.json().get("query", {}).get("search", [])
        except Exception as e:
            st.error(f"Search error: {e}")
            return []

    def get_summary(self, title: str) -> Optional[Dict]:
        clean = title.replace(" ", "_")
        try:
            r = requests.get(self.summary_url + clean, timeout=10)
            r.raise_for_status()
            return r.json()
        except Exception as e:
            st.error(f"Summary error: {e}")
            return None

    def get_images(self, title: str, limit: int = 4) -> List[Dict]:
        params = {
            "action": "query", "format": "json", "generator": "search",
            "gsrsearch": title, "gsrnamespace": 6, "gsrlimit": limit,
            "prop": "imageinfo", "iiprop": "url|size", "iiurlwidth": 300
        }
        try:
            r = requests.get(self.commons_url, params=params, timeout=10)
            r.raise_for_status()
            pages = r.json().get("query", {}).get("pages", {})
            imgs = []
            for p in pages.values():
                info = p.get("imageinfo", [{}])[0]
                if info.get("thumburl"):
                    imgs.append({"url": info["thumburl"], "title": p.get("title", "").replace("File:", "")})
            return imgs
        except Exception as e:
            st.error(f"Image error: {e}")
            return []

# --- Quiz Generator via Wikipedia ---
def generate_quiz_from_wikipedia(topic: str, lang_code: str, count: int = 5) -> List[Dict]:
    explorer = IndianHistoryExplorer(lang_code)
    pages = explorer.search_wikipedia(topic)
    facts = []
    for p in pages[:3]:
        summary = explorer.get_summary(p["title"])
        extract = summary.get("extract", "") if summary else ""
        sentences = [s.strip() for s in extract.split('.') if len(s.strip()) > 20]
        for s in sentences:
            facts.append((p["title"], s))
    random.shuffle(facts)
    # Build quiz
    quiz = []
    for i in range(min(count, len(facts))):
        title, fact = facts[i]
        question = f"In reference to '{title}', which statement is correct?"
        correct = fact.strip()
        words = correct.split()
        distractors = []
        for _ in range(3):
            idx = random.randint(0, max(0, len(words)-8))
            distractor = ' '.join(words[idx:idx+8]) + '...'
            distractors.append(distractor)
        options = distractors + [correct]
        random.shuffle(options)
        quiz.append({
            "question": question,
            "options": options,
            "correct": options.index(correct),
            "explanation": correct
        })
    return quiz

# --- Main App ---
def main():
    if "language" not in st.session_state:
        st.session_state.language = "English"
    if "quiz_active" not in st.session_state:
        st.session_state.quiz_active = False
    if "quiz_data" not in st.session_state:
        st.session_state.quiz_data = []
    if "user_answers" not in st.session_state:
        st.session_state.user_answers = {}

    # Sidebar тАФ language selector
    st.sidebar.title("тЪЩя╕П " + LANGUAGES[st.session_state.language]["language_selector"])
    lang = st.sidebar.selectbox(
        "", options=list(LANGUAGES.keys()),
        index=list(LANGUAGES.keys()).index(st.session_state.language)
    )
    if lang != st.session_state.language:
        st.session_state.language = lang
        st.session_state.needs_reload = True

    if st.session_state.needs_reload:
        st.session_state.needs_reload = False
        st.rerun()

    txt = LANGUAGES[st.session_state.language]
    lang_code = WIKI_DOMAINS[st.session_state.language]
    explorer = IndianHistoryExplorer(lang_code)

    st.title(txt["title"])
    st.markdown(f"**{txt['subtitle']}**")

    tab1, tab2 = st.tabs([txt["search_button"], txt["quiz_button"]])

    with tab1:
        st.header(txt["search_button"])
        query = st.text_input("search_input", placeholder=txt["search_placeholder"], label_visibility="collapsed")
        if st.button(txt["search_button"]):
            if not query.strip():
                st.warning(txt["no_results"])
            else:
                with st.spinner(txt["loading"]):
                    results = explorer.search_wikipedia(query)
                    time.sleep(0.3)
                if results:
                    st.success(f"{len(results)} result(s)")
                    for idx, item in enumerate(results):
                        title = item["title"]
                        with st.expander(f"ЁЯУЬ {title}", expanded=(idx == 0)):
                            summary = explorer.get_summary(title)
                            if summary:
                                c1, c2 = st.columns([3,1])
                                with c1:
                                    st.subheader(txt["historical_context"])
                                    st.write(summary.get("extract", ""))
                                    link = summary.get("content_urls", {}).get("desktop", {}).get("page", "")
                                    if link:
                                        st.markdown(f"[{txt['wiki_link']}]({link})")
                                with c2:
                                    thumb = summary.get("thumbnail", {}).get("source", "")
                                    if thumb:
                                        st.image(thumb, width=200)
                                st.subheader(txt["image_gallery"])
                                imgs = explorer.get_images(title)
                                if imgs:
                                    cols = st.columns(len(imgs))
                                    for i_img, img in enumerate(imgs):
                                        cols[i_img].image(img["url"], caption=img["title"], use_container_width=True)
                                else:
                                    st.info(txt["no_results"])
                else:
                    st.warning(txt["no_results"])

    with tab2:
        st.header(txt["quiz_title"])
        topic = st.text_input("quiz_topic", placeholder=txt["quiz_topic_placeholder"], label_visibility="collapsed")
        if st.button(txt["quiz_button"]):
            if topic.strip():
                st.session_state.quiz_active = True
                st.session_state.quiz_data = generate_quiz_from_wikipedia(topic, lang_code, count=5)
                st.session_state.user_answers = {}
            else:
                st.warning(txt["quiz_topic_placeholder"])

        if st.session_state.quiz_active and st.session_state.quiz_data:
            st.markdown("---")
            for i, q in enumerate(st.session_state.quiz_data):
                st.markdown(f"**Q{i+1}. {q['question']}**")
                ans = st.radio(f"ans_{i}", q["options"], key=f"ans_{i}")
                st.session_state.user_answers[i] = ans
            if st.button(txt["submit_quiz"]):
                total = len(st.session_state.quiz_data)
                correct = sum(
                    st.session_state.user_answers.get(i) == q["options"][q["correct"]]
                    for i, q in enumerate(st.session_state.quiz_data)
                )
                pct = correct / total * 100
                st.metric(txt["score_text"], f"{correct}/{total} ({pct:.1f}%)")
                message = (
                    txt["congratulations"] if pct >= 80 else
                    txt["well_done"] if pct >= 60 else
                    txt["good_effort"] if pct >= 40 else
                    txt["keep_learning"]
                )
                st.success(message)
                st.markdown("### Detailed Answers")
                for i, q in enumerate(st.session_state.quiz_data):
                    ua = st.session_state.user_answers.get(i)
                    ca = q["options"][q["correct"]]
                    with st.expander(f"Q{i+1}: {q['question']}"):
                        if ua == ca:
                            st.success("тЬЕ Correct!")
                        else:
                            st.error("тЭМ Incorrect")
                            st.write(f"{txt['correct_answer']} {ca}")
                        st.write(f"**{txt['explanation']}** {q['explanation']}")
                if st.button("ЁЯФБ " + txt["quiz_button"]):
                    st.session_state.quiz_active = False

if __name__ == "__main__":
    main()
